import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import math

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å –∫–æ—Ä–Ω—è–º–∏
def find_intervals(f, x_min, x_max, step=0.1):
    intervals = []
    x = x_min
    while x < x_max:
        try:
            f1 = f(x)
            f2 = f(x + step)
            if f1 * f2 < 0:
                intervals.append((x, x + step))
        except: pass
        x += step
    return intervals

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
def numerical_derivative(f, x, h=1e-5):
    try: return (f(x + h) - f(x - h)) / (2 * h)
    except: return None

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
def simple_iteration(g, x0, epsilon, max_iter):
    x_prev = x0
    iterations = [x0]
    errors = []
    
    for _ in range(max_iter):
        try:
            x_next = g(x_prev)
        except Exception as e:
            return None, None, f"–û—à–∏–±–∫–∞: {str(e)}"
        
        error = abs(x_next - x_prev)
        errors.append(error)
        iterations.append(x_next)
        
        if error < epsilon:
            break
            
        x_prev = x_next
    
    return iterations, errors, None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ú–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏", layout="wide")
st.title("üîç –†–µ—à–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("–í–≤–æ–¥ —É—Ä–∞–≤–Ω–µ–Ω–∏—è")
    
    # –ü–æ–ª–µ –¥–ª—è f(x) = 0 –≤ Python-—Ñ–æ—Ä–º–∞—Ç–µ
    f_str = st.text_input("f(x) = 0", value="x + math.cos(x) - 2")
    st.caption("–ü—Ä–∏–º–µ—Ä—ã: x + math.cos(x) - 2, x**2 - 2, math.exp(x) - x - 2")
    
    # –ü–æ–ª–µ –¥–ª—è g(x) = x
    g_str = st.text_input("–§—É–Ω–∫—Ü–∏—è g(x) (x = g(x))", value="2 - math.cos(x)")
    st.caption("–ü—Ä–∏–º–µ—Ä—ã: 2 - math.cos(x), (x + 2/x)/2, math.log(x + 2)")
    
    x0 = st.number_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ x0", 2.98, step=0.1)
    epsilon = st.number_input("–¢–æ—á–Ω–æ—Å—Ç—å", 1e-6, format="%.6f")
    max_iter = st.slider("–ú–∞–∫—Å. –∏—Ç–µ—Ä–∞—Ü–∏–π", 10, 1000, 100)
    
    col1, col2 = st.columns(2)
    with col1: find_intervals_btn = st.button("–ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã")
    with col2: study_convergence_btn = st.button("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    
    st.info("–í–∞–∂–Ω–æ: –î–ª—è –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –≤–∏–¥ x = g(x)")

# –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"
if st.sidebar.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ f(x) –∏ g(x)
        f = lambda x: eval(f_str, {"math": math, "np": np}, {"x": x})
        g = lambda x: eval(g_str, {"math": math, "np": np}, {"x": x})
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        intervals = find_intervals(f, x0-5, x0+5)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        iterations, errors, error_msg = simple_iteration(g, x0, epsilon, max_iter)
        if error_msg: raise Exception(error_msg)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        deriv = numerical_derivative(g, iterations[-1])
        condition = "‚úÖ –°—Ö–æ–¥–∏—Ç—Å—è" if deriv is not None and abs(deriv) < 1 else "‚ö†Ô∏è –ù–µ —Å—Ö–æ–¥–∏—Ç—Å—è"
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–ö–æ—Ä–µ–Ω—å", f"{iterations[-1]:.8f}")
            st.metric("–ò—Ç–µ—Ä–∞—Ü–∏–π", len(iterations)-1)
            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{abs(iterations[-1]-iterations[-2]):.2e}")
        with col2:
            st.metric("g(x)", f"{g(iterations[-1]):.8f}")
            st.metric("|x - g(x)|", f"{abs(iterations[-1]-g(iterations[-1])):.2e}")
            st.metric("–°—Ö–æ–¥–∏–º–æ—Å—Ç—å", condition)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
        st.subheader("üîç –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å –∫–æ—Ä–Ω—è–º–∏")
        if intervals:
            for i, (a, b) in enumerate(intervals):
                st.write(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª {i+1}: [{a:.4f}, {b:.4f}]")
        else:
            st.warning("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        fig, ax = plt.subplots(figsize=(10, 6))
        x_min, x_max = min(iterations)-1, max(iterations)+1
        x_vals = np.linspace(x_min, x_max, 1000)
        y_g = [g(x) for x in x_vals]
        y_x = x_vals
        
        ax.plot(x_vals, y_g, 'b-', label='y = g(x)')
        ax.plot(x_vals, y_x, 'r--', label='y = x')
        
        for i in range(len(iterations)-1):
            ax.plot([iterations[i], iterations[i+1]], [iterations[i], iterations[i]], 'g-', alpha=0.8)
            ax.plot([iterations[i+1], iterations[i+1]], [iterations[i], iterations[i+1]], 'g-', alpha=0.8)
        
        ax.scatter(iterations, iterations, color='red', s=50)
        ax.set_xlabel('x'); ax.set_ylabel('y'); ax.grid(True); ax.legend()
        st.pyplot(fig)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        ax2.plot(range(len(errors)), np.log10(errors), 'bo-')
        ax2.set_xlabel('–ù–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏'); ax2.set_ylabel('log10(–æ—à–∏–±–∫–∞)'); ax2.grid(True)
        st.pyplot(fig2)
        
        # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
        if study_convergence_btn:
            st.subheader("üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–π –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏")
            epsilons = [10**(-i) for i in range(2, 11)]
            iters = []
            for eps in epsilons:
                _, _, errors, _ = simple_iteration(g, x0, eps, max_iter)
                iters.append(len(errors))
            
            fig3, ax3 = plt.subplots(figsize=(10, 6))
            ax3.plot(np.log10(epsilons), iters, 'go-')
            ax3.set_xlabel('log10(—Ç–æ—á–Ω–æ—Å—Ç—å)'); ax3.set_ylabel('–ß–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π'); ax3.grid(True)
            st.pyplot(fig3)
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        st.markdown("""
        **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**
        - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ g(x)
        - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, arccos –æ—Ç —á–∏—Å–ª–∞ >1)
        """)
        st.code("""
        –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
        - –î–ª—è x + cos(x) = 2: 2 - math.cos(x)
        - –î–ª—è x^2 - 2 = 0: (x + 2/x)/2
        - –î–ª—è x^3 - x - 1 = 0: (x + 1)**(1/3)
        """)
